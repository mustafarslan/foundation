drop table if exists ASSETS;

drop table if exists CUSTOMER_ROLES;

drop table if exists CUSTOMERS;

drop table if exists MONEY;

drop table if exists ORDERS;



CREATE TABLE IF NOT EXISTS ORDERS (
    ID              INT AUTO_INCREMENT PRIMARY KEY,
    CREATED_DATE    TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    MODIFIED_DATE   TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CREATE_DATE     TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CUSTOMER_ID     BIGINT NOT NULL,
    ASSET_NAME      VARCHAR(255) NOT NULL,
    ORDER_SIDE      VARCHAR(4) CHECK (ORDER_SIDE IN ('BUY', 'SELL')),
    SIZE            INT NOT NULL,
    PRICE           DECIMAL(19, 4) NOT NULL,
    STATUS          VARCHAR(10) CHECK (STATUS IN ('PENDING', 'MATCHED', 'CANCELED'))
);

CREATE TABLE IF NOT EXISTS ASSETS (
    ID              INT AUTO_INCREMENT PRIMARY KEY,
    CREATED_DATE    TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    MODIFIED_DATE   TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CUSTOMER_ID     BIGINT NOT NULL,
    ASSET_NAME      VARCHAR(255) NOT NULL,
    SIZE            INT NOT NULL,
    USABLE_SIZE     INT NOT NULL
);

CREATE TABLE IF NOT EXISTS MONEY (
    ID              INT AUTO_INCREMENT PRIMARY KEY,
    CREATED_DATE    TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    MODIFIED_DATE   TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CUSTOMER_ID     BIGINT NOT NULL,
    AMOUNT          INT NOT NULL,
    IBAN            VARCHAR2(34),
    TYPE            VARCHAR(8) CHECK (TYPE IN ('DEPOSIT', 'WITHDRAW'))
);

CREATE TABLE IF NOT EXISTS CUSTOMERS (
    ID              BIGINT       AUTO_INCREMENT PRIMARY KEY,        -- Unique identifier for each customer
    CREATED_DATE    TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    MODIFIED_DATE   TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CUSTOMER_ID     BIGINT NOT NULL,
    USERNAME        CHARACTER VARYING(255) NOT NULL UNIQUE,       -- Username (must be unique)
    PASSWORD        CHARACTER VARYING(255) NOT NULL               -- Password (hashed)
);

CREATE TABLE IF NOT EXISTS CUSTOMER_ROLES (
    CUSTOMER_ID     BIGINT NOT NULL,                 -- Foreign key to customers table
    ROLE            VARCHAR(50) NOT NULL,                   -- Role name (e.g., ROLE_USER, ROLE_ADMIN)
    PRIMARY KEY (CUSTOMER_ID, ROLE),             -- Composite primary key to ensure uniqueness
    FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMERS(ID) ON DELETE CASCADE
);